# Лабораторные работы по космической геодезии
# Работа 1. Координатные системы отсчёта и системы времени при решении задач космической геодезии
# Усольцев Артём, ПГ-31, 2023 год
# Вариант 16
########################################################################################################################

from math import sin, cos, sqrt, radians, degrees, atan
import numpy as np
from ellipsoids import pz90, krasovsky

# Параметры ориентировки эллипсоида Красовского относительно ПЗ-90
# Координаты мгновенного полюса
x_p = 0.25 / 3600
y_p = -0.315 / 3600
# Вектор переноса начал T (meters)
T_X = 25.0
T_Y = -130.94
T_Z = -81.76
T_XYZ = np.array([[T_X], [T_Y], [T_Z]])
# Вектор малого вращения w
w_X = 0.000 / 3600
w_Y = 0.035 / 3600
w_Z = 0.660 / 3600
w_XYZ = np.array([[w_X], [w_Y], [w_Z]])
########################################################################################################################

# Исходные данные по вариантам
# Геодезические координаты ИСЗ в системе ПЗ-90
B_pz90 = radians(47 + 49 / 60 + 47.94 / 3600)
L_pz90 = radians(26 + 13 / 60 + 54.34 / 3600)
H_pz90 = 988_581
# Сферические топоцентрические координаты ИСЗ в истинной небесной системе
rho = 987_888
alpha = radians(13 + 53 / 60 + 06.43 / 3600)
delta = radians(46 + 29 / 60 + 12.70 / 3600)
# Момент наблюдения по гринвичскому звёздному времени
S = 12 + 8 / 60 + 49.30 / 3600  # hms

########################################################################################################################
##############################################                 #########################################################
##############################################     РЕШЕНИЕ     #########################################################
##############################################                 #########################################################
########################################################################################################################

N_pz90 = pz90.a / sqrt(1 - pz90.e2 * sin(B_pz90) ** 2)  # Радиус кривизны эллипсоида в первом вертикале

# 1. Геодезические прямоугольные координаты спутника в системе ПЗ-90
X_pz90 = (N_pz90 + H_pz90) * cos(B_pz90) * cos(L_pz90)
Y_pz90 = (N_pz90 + H_pz90) * cos(B_pz90) * sin(L_pz90)
Z_pz90 = (N_pz90 * (1 - pz90.e2) + H_pz90) * sin(B_pz90)
XYZ_pz90 = np.array([[X_pz90], [Y_pz90], [Z_pz90]])

# 2. Вычисление топоцентрических прямоугольных мгновенных земных координат по сферическим
delta_hatch = delta
t_hatch = radians(degrees(alpha) - S * 15)

X_hatch_g = rho * cos(delta_hatch) * cos(t_hatch)
Y_hatch_g = rho * cos(delta_hatch) * sin(t_hatch)
Z_hatch_g = rho * sin(delta_hatch)
XYZ_hatch_G = np.array([[X_hatch_g], [Y_hatch_g], [Z_hatch_g]])
r_hatch = XYZ_hatch_G

# Pol(t)
Pol_t = np.array([[1, 0, x_p],
                  [0, 1, y_p * (-1)],
                  [x_p * (-1), y_p, 1]])

# 3. Перевод мгновенных земных топоцентрических координат спутника в средние земные координаты
XYZ_hatch = np.matmul(Pol_t, XYZ_hatch_G)

# 4. Вычисление прямоугольных координат пункта (средних земных геоцентрических) в системе WGS-84
#    через основное уравнение космической геодезии
r = sqrt(X_pz90 ** 2 + Y_pz90 ** 2)

R_WGS = r - r_hatch
# TODO: разобраться что такое r

# 5. Переход из системы эллипсоида ПЗ-90 в систему СК-95
mu = 1
fucking = np.array([[mu, w_Z, w_Y * (-1)],
                    [(-1) * w_Z, mu, w_X],
                    [w_Y, w_X * (-1), mu]])

XYZ_sk95 = np.add((np.add(XYZ_pz90 + T_XYZ)), (np.matmul(fucking, XYZ_pz90)))
X_sk95 = XYZ_sk95.item(0)
Y_sk95 = XYZ_sk95.item(1)
Z_sk95 = XYZ_sk95.item(2)

# 6. Вычисление геодезических координат B, L, H на эллипсоиде СК-95 по прямоугольным X, Y, Z
L_sk95 = atan(Y_sk95 / X_sk95)
r = sqrt(X_sk95 ** 2 + Y_sk95 ** 2)
# вонючий итеративный процесс ##########################################################################################
epsilon_degrees = 0.1 / 360 / 60 / 60 / 100  # почему
# начальная инициализация
N_sk95 = krasovsky.a / sqrt(1 - krasovsky.e2 * sin(B_pz90))  # TODO: какое значение долготы я должен использовать при
                                                             # TODO: инициализации? я тупо взял из значения для ПЗ-90
B_sk95 = atan((Z_sk95 + N_sk95 * krasovsky.e2 * sin(B_pz90)) / r)
last_val = B_sk95
# цикл
while True:
    N_sk95 = krasovsky.a / sqrt(1 - krasovsky.e2 * sin(B_sk95))
    B_sk95 = atan((Z_sk95 + N_sk95 * krasovsky.e2 * sin(B_sk95)) / r)
    if abs(B_sk95 - last_val) < epsilon_degrees:
        break
########################################################################################################################
H_sk95 = Z_sk95 / sin(B_sk95)
BLH_sk95 = np.array([[B_sk95], [L_sk95], [H_sk95]])
